{"version":3,"file":"reactivity.cjs.js","sources":["../../shared/src/index.ts","../src/baseHandlers.ts","../src/reactive.ts"],"sourcesContent":["// 公共函数\r\n\r\n// 是否是对象类型\r\nexport const isObject = (value) => typeof value == 'object' && value !== null\r\n\r\n// 合并对象\r\nexport const extend = Object.assign","import { extend, isObject } from '@vue/shared';\r\nimport { reactive, readonly } from './reactive';\r\n/**\r\n * baseHandlers.js\r\n * new Proxy(target,handler) 中 handler的具体实现\r\n * 是否是深度代理，还是只代理对象的第一层属性\r\n * 是否是只读的，只读对象，调用set时应该报异常\r\n */\r\n\r\n/**\r\n * Reflect介绍\r\n * Reflect后，后续Object上的方法，会被迁移到Reflect中(原本使用Object.getProptypeof() ，后续使用Reflect.getProptypeof())\r\n * target[key] = value 的方式设置值可能会失败(比如该属性被设置为只读)，赋值失败也不会报异常，并且没有返回值标识\r\n * Reflect 方法具备返回值，能通知使用者，方法是否调用成功\r\n */\r\n\r\n/**\r\n * 拦截获取功能的具体实现\r\n * @param isReadonly 是否只读\r\n * @param isShallow 是否浅代理，只代理对象的第一层属性\r\n */\r\nfunction createGetter(isReadonly = false, isShallow = false) {\r\n  // 获取原始对象的某个属性值，receiver 代理后的对象,如 let proxy = reactive({obj:{}}) , 代理后的对象就是proxy\r\n  return function get(target, key, receiver) {\r\n    // proxy + reflect的应用\r\n    const res = Reflect.get(target, key, receiver) // 相当于 target[key]\r\n\r\n    // 不是只读，收集依赖，数据变化后更新对应的试图\r\n    if (!isReadonly) {\r\n\r\n    }\r\n\r\n    // 是浅代理并且只读,返回get的结果(target[key])\r\n    if (isShallow) {\r\n      return res\r\n    }\r\n\r\n    /**\r\n     * 当获取到的res是一个对象，将res对象再包一层响应式(readonly() 或 reactive() )\r\n     * Vue2是完整遍历整个对象的所有属性进行代理，Vue3 的代理模式是懒代理,用到哪层属性，再将这层的属性进行代理\r\n     */\r\n    if (isObject(res)) {\r\n      return isReadonly ? readonly(res) : reactive(res)\r\n    }\r\n\r\n    return res\r\n  }\r\n}\r\n/**\r\n * 拦截设置功能的具体实现\r\n * @param isShallow 是否浅代理，只代理对象的第一层属性\r\n */\r\nfunction createSetter(isShallow = false) {\r\n  return function set(target, key, value, receiver) {\r\n    const result = Reflect.set(target, key, value, receiver) // 相当于target[key] = value\r\n\r\n    return result\r\n  }\r\n}\r\nconst get = createGetter()\r\nconst shallowGet = createGetter(false, true)\r\nconst readonlyGet = createGetter(true)\r\nconst shallowReadonlyGet = createGetter(true, true)\r\n\r\nconst set = createSetter()\r\nconst shallowSet = createSetter(true)\r\n\r\n\r\n\r\nexport const mutableHandlers = {\r\n  get,\r\n  set\r\n}\r\n\r\nexport const shallowReactiveHandlers = {\r\n  get: shallowGet,\r\n  set: shallowSet\r\n}\r\n\r\n// 只读异常提示\r\nlet readonlyObj = {\r\n  set: (target, key) => {\r\n    console.warn(`set on key ${key} failed`)\r\n  }\r\n}\r\n\r\nexport const readonlyHandlers = extend({\r\n  get: readonlyGet,\r\n}, readonlyObj)\r\n\r\nexport const shallowReadonlyHandlers = extend({\r\n  get: shallowReadonlyGet,\r\n\r\n}, readonlyObj) \r\n","import { isObject } from '@vue/shared';\r\nimport {\r\n  mutableHandlers,\r\n  shallowReactiveHandlers,\r\n  readonlyHandlers,\r\n  shallowReadonlyHandlers,\r\n} from './baseHandlers';\r\n\r\nexport function reactive(target) {\r\n  return createReactiveObject(target, false, mutableHandlers)\r\n}\r\n\r\nexport function shallowReactive(target) {\r\n  return createReactiveObject(target, false, shallowReactiveHandlers)\r\n\r\n}\r\n\r\n// readonly 不需要收集依赖，性能更高\r\nexport function readonly(target) {\r\n  return createReactiveObject(target, true, readonlyHandlers)\r\n\r\n}\r\n\r\nexport function shallowReadonly(target) {\r\n  return createReactiveObject(target, true, shallowReadonlyHandlers)\r\n\r\n}\r\n\r\n/**\r\n * 这几个方法的区别在于，是否只读，以及响应式深度不同，使用 createReactiveObject 公共函数\r\n * 柯里化，传不同参数，实现不同效果，\r\n * new Proxy() 核心是拦截数据的读取和数据的修改(劫持代理get 和 set 方法)\r\n */\r\n\r\n/**\r\n * WeakMap 会自动垃圾回收，不会造成内存泄露，存储的key只能是对象\r\n * Map 的key 如果是对象，当这个对象被清空，可能会出现 Map 还在引用这个对象的情况，造成内存泄漏\r\n */\r\nconst reactiveMap = new WeakMap() // 响应式数据代理空间，存储已经被代理的对象\r\nconst readonlyMap = new WeakMap() // 只读数据代理空间，存储已经被代理的对象\r\n\r\n/**\r\n * 劫持代理目标对象(target)，并将代理后的proxy对象放入代理空间\r\n * @param target 目标对象\r\n * @param isReadonly 是否只读\r\n * @param baseHandler new Proxy(target,handler) 中 handler的具体实现\r\n * @returns \r\n */\r\nexport function createReactiveObject(target, isReadonly, baseHandler) {\r\n  // proxy 只能拦截对象，reactive 只能拦截对象类型，如果不是对象，直接return target\r\n  if (!isObject(target)) {\r\n    return target\r\n  }\r\n\r\n  // 当一个对象被代理过了，就不需要重复代理，并且一个对象可能被reactive（响应式）代理，又被readonly（只读）代理，需要区分\r\n  const proxyMap = isReadonly ? readonlyMap : reactiveMap\r\n  const exisitProxy = proxyMap.get(target)\r\n\r\n  // 如果目标对象（target）已经被代理过了，直接返回\r\n  if (exisitProxy) {\r\n    return exisitProxy\r\n  }\r\n  const proxy = new Proxy(target, baseHandler)\r\n  proxyMap.set(target, proxy) // 将被代理的对象（target）和代理后的结果存储在 WeakMap 中\r\n  return proxy\r\n}"],"names":[],"mappings":"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"}