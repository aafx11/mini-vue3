{"version":3,"file":"reactivity.cjs.js","sources":["../../shared/src/index.ts","../src/effect.ts","../src/baseHandlers.ts","../src/reactive.ts","../src/ref.ts"],"sourcesContent":["/* 公共函数 */\r\n\r\n/* 判断数据类型 */\r\nexport const isObject = (value) => typeof value == 'object' && value !== null // 是否是对象类型\r\nexport const isArray = Array.isArray\r\nexport const isFunction = (value) => typeof value == 'function'\r\nexport const isNumber = (value) => typeof value == 'number'\r\nexport const isString = (value) => typeof value == 'string'\r\nexport const isIntegerKey = (key) => parseInt(key) + '' === key // 判断是否是数组索引\r\n\r\nlet hasOwnProperty = Object.prototype.hasOwnProperty\r\nexport const hasOwn = (target, key) => hasOwnProperty.call(target, key) // 判断对象是否有该属性\r\n\r\nexport const hasChanged = (oldValue, value)=> oldValue !== value // 判断旧值和新修改的值，是否相等\r\n\r\nexport const extend = Object.assign // 合并对象","import { isArray, isIntegerKey } from '@vue/shared';\r\nimport { TriggerOpTypes } from './operators';\r\n/**\r\n * effect 中所有属性都会收集依赖（收集对应effect）， track 跟踪（收集）依赖\r\n * 当这个属性发生变化 就会重新执行effect trigger 触发更新\r\n */\r\n\r\n\r\n/**\r\n * effect副作用函数，将这个effect变成响应式的effect，做到数据发生变化，就重新执行effect函数更新视图\r\n * @param fn \r\n * @param options \r\n */\r\nexport function effect(fn, options: any = {}) {\r\n  const effect = createReactiveEffect(fn, options)\r\n\r\n  // 响应式的effect会默认执行一次，如果options配置了lazy 懒执行，则不执行effect()\r\n  if (!options.lazy) {\r\n    effect()\r\n  }\r\n\r\n  return effect\r\n}\r\nlet uid = 0\r\nlet activeEffect // 存储当前执行的effect函数，使track 函数中，可以获取到当前执行的 effect 函数\r\nconst effectStack = [] // 存储多个effect函数，并且最后一个effect 永远是当前执行的effect 函数\r\nfunction createReactiveEffect(fn, options) {\r\n  const effect = function reactiveEffect() {\r\n    // 当 effect 函数 不在 effectStack 栈中，再执行入栈，防止同一个effect重复入栈，防止无限执行\r\n    if (!effectStack.includes(effect)) {\r\n      try {\r\n        effectStack.push(effect) // 入栈\r\n        activeEffect = effect\r\n        return fn() // fn 函数会有返回值\r\n      } finally { // fn 函数可能会报错，try-finally 能保证fn 函数执行完后，出栈\r\n        effectStack.pop() // fn 函数执行完后，出栈\r\n        activeEffect = effectStack[effectStack.length - 1]\r\n      }\r\n    }\r\n  }\r\n\r\n  effect.id = uid++ // 标识每个effect的唯一性\r\n  effect._isEffect = true // 标识这个是响应式effect ，并且是私有变量，外部无法获取\r\n  effect.raw = fn // 保存原函数\r\n  effect.options = options // 保存配置项\r\n\r\n  return effect\r\n}\r\n\r\nconst targetMap = new WeakMap()\r\n// track 函数,收集依赖，让某个对象(target)中的某个属性(key)，收集当前对应的effect函数\r\nexport function track(target, type, key) {\r\n  // 此属性(key)不需要收集依赖 , 因为没在 effect 中执行\r\n  if (activeEffect === undefined) {\r\n    return\r\n  }\r\n\r\n  let depsMap = targetMap.get(target) // 获取到的是一个Map\r\n  if (!depsMap) {\r\n    targetMap.set(target, (depsMap = new Map))\r\n  }\r\n  let dep = depsMap.get(key) // key 对应的依赖收集\r\n  if (!dep) {\r\n    depsMap.set(key, (dep = new Set))\r\n  }\r\n  if (!dep.has(activeEffect)) {\r\n    dep.add(activeEffect)\r\n  }\r\n  console.log('targetMap', targetMap);\r\n\r\n}\r\n\r\n// 触发更新，找到属性对应的 effect ，让其执行\r\nexport function trigger(target, type, key?, newValue?, oldValue?) {\r\n  console.log(target, type, key, newValue, oldValue);\r\n  // 判断这个属性有无收集过 effect ，如果无，则不需要触发更新\r\n  const depsMap = targetMap.get(target) // 得到的是一个Map(当前这个对象属性的所有依赖，有选择性的触发更新) ， key 是属性 ，value 是对应的 effect\r\n  if (!depsMap) return\r\n\r\n  // 将所有需要执行的 effect，全部存到一个新的集合中，最后一起执行 (effects 需要防止重复，为 Set 可以去重，在examples文件夹中的effect.html 中 ，数组元素的下标和数组长度对应同一个effect )\r\n  const effects = new Set()\r\n  const add = (effectsToAdd) => {\r\n    if (effectsToAdd) {\r\n      effectsToAdd.forEach(effect => effects.add(effect));\r\n    }\r\n  }\r\n\r\n  if (key === 'length' && isArray(target)) { // 修改数组长度\r\n    depsMap.forEach((dep, key) => {\r\n      /**\r\n       * 在target 为数组，key 为length的情况下，depsMap里的key 可能为数组下标或数组长度length\r\n       * 在examples文件夹中的effect.html 中\r\n       * reactiveTest.arr.length = 1 ，当前 newValue 就为1\r\n       * 而 effect 函数中app.innerHTML = reactiveTest.arr[2] ，key 为2 \r\n       * 则 key(2) > newValue(1) ，需要触发更新(即数组长度的修改，覆盖到了数组原有的元素)\r\n       */\r\n      if (key === 'length' || key > newValue) {\r\n        add(dep) // dep是属性对应的 effect\r\n      }\r\n    });\r\n  } else { // 除去修改数组长度的特殊操作,剩余对象或数组的 ADD,SET 操作\r\n    if (key !== void 0) { // key不等于 undefined，有key，为SET(修改)操作\r\n      add(depsMap.get(key)) // 取出 effect 并放入 effects\r\n    }\r\n\r\n    switch (type) {\r\n      case TriggerOpTypes.ADD:\r\n        // 如果数组添加了一个索引，触发长度的更新\r\n        if (isArray(target) && isIntegerKey(key)) {\r\n          add(depsMap.get('length'))\r\n        }\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n  effects.forEach((effect: any) => effect())\r\n}\r\n\r\n/**\r\n * 对象的属性和对应的多个 effect 之间的关系 \r\n * target ：{ name: 'test', age: { num: 20 }\r\n * key ：name \r\n * 对应的effect（可能为多个）: [effect1 , effect2]\r\n * 如何去存储 对象--> 属性--> effect 的三层关系？\r\n * WeakMap(1) key为 对象， value 还是为一个 Map(2) ，Map(2) 的 key 为属性，value 为一个 Set（Set可以去重） 存储多个effect  \r\n */\r\n\r\n/**\r\n * 为什么需要 effectStack 栈来存储 effect 函数？\r\n * let activeEffect ,如果直接将当前执行的effect函数赋值给 activeEffect 来保存，无法处理嵌套effect 的情况\r\n * effect(()=>{ 第一个effect 是effect1\r\n *  \r\n *  obj.name ='name' 这个属性关联effect1 \r\n *  \r\n *  effect(()=>{  第二个effect 是effect2\r\n *    obj.age = '20'  这个属性关联effect2 ，这个时候 activeEffect就变成effect2 了\r\n *  }) \r\n *    \r\n *  obj.num = 20 这个属性会关联effect2 , 这是不合理的，obj的num属性正确关联应该是 effect1\r\n *  \r\n *  所以需要是一个栈 effectStack , 存储多个effect ，effect 执行前，将effect入栈，\r\n *  当effect 执行完，就出栈，这样effectStack的最后一个effect，永远是当前执行的effect \r\n * })\r\n * \r\n */","import { extend, isObject, isArray, isIntegerKey, hasOwn, hasChanged } from '@vue/shared';\r\nimport { track, trigger } from './effect';\r\nimport { TrackOpTypes, TriggerOpTypes } from './operators';\r\nimport { reactive, readonly } from './reactive';\r\n/**\r\n * baseHandlers.js\r\n * new Proxy(target,handler) 中 handler的具体实现\r\n * 是否是深度代理，还是只代理对象的第一层属性\r\n * 是否是只读的，只读对象，调用set时应该报异常\r\n */\r\n\r\n/**\r\n * Reflect介绍\r\n * Reflect后，后续Object上的方法，会被迁移到Reflect中(原本使用Object.getProptypeof() ，后续使用Reflect.getProptypeof())\r\n * target[key] = value 的方式设置值可能会失败(比如该属性被设置为只读)，赋值失败也不会报异常，并且没有返回值标识\r\n * Reflect 方法具备返回值，能通知使用者，方法是否调用成功\r\n */\r\n\r\n/**\r\n * createGetter 拦截获取功能的具体实现\r\n * @param isReadonly 是否只读\r\n * @param shallow 是否浅代理，只代理对象的第一层属性\r\n */\r\nfunction createGetter(isReadonly = false, shallow = false) {\r\n  // 获取原始对象的某个属性值，receiver 代理后的对象,如 let proxy = reactive({obj:{}}) , 代理后的对象就是proxy\r\n  return function get(target, key, receiver) {\r\n    console.log('get', key);\r\n\r\n    // proxy + reflect的应用\r\n    const res = Reflect.get(target, key, receiver) // 相当于 target[key]\r\n\r\n    // 不是只读，收集依赖，数据变化后更新对应的试图\r\n    if (!isReadonly) {\r\n      // effect 函数(参考effect.ts文件)执行时,会进行取值，触发get方法，就能收集依赖（收集effect），使响应式数据和effect函数产生关联\r\n      // TrackOpTypes.GET 当对这个对象（target）的属性(key)进行get操作时，进行依赖收集(如template中v-model双向绑定，在初始化取值，就会触发get)\r\n      track(target, TrackOpTypes.GET, key)\r\n    }\r\n\r\n    // 是浅代理并且只读,返回get的结果(target[key])\r\n    if (shallow) {\r\n      return res\r\n    }\r\n\r\n    /**\r\n     * 深度代理\r\n     * 深度代理,当获取到的res是一个对象，再将原始对象转换成proxy对象，将res对象再包一层响应式(readonly() 或 reactive() )\r\n     * Vue2是完整遍历整个对象的所有属性进行代理，Vue3 的代理模式是懒代理,用到哪层属性，再将这层的属性进行代理\r\n     */\r\n    if (isObject(res)) {\r\n      return isReadonly ? readonly(res) : reactive(res)\r\n    }\r\n\r\n    return res\r\n  }\r\n}\r\n/**\r\n * createSetter 拦截设置功能的具体实现\r\n * 当数据更新触发 set 时，通知对应属性的对应 effect 重新执行\r\n * 需要区分是新增（对象中新增属性，数组中新增元素）还是修改（修改对象中原有的属性，修改数组中原有的元素）\r\n * 修改还会出现，新修改的值和旧的值相等的情况\r\n * vue2 里无法监控更改索引，无法监控数组长度\r\n * @param shallow 是否浅代理，只代理对象的第一层属性\r\n */\r\nfunction createSetter(shallow = false) {\r\n  return function set(target, key, value, receiver) {\r\n    const oldValue = target[key] // 获取修改前的值\r\n\r\n    // hadKey 用于判断是新增还是修改操作\r\n    let hadKey = isArray(target) && isIntegerKey(key) ? // 判断是否是数组，key 是否是整数索引\r\n      Number(key) < target.length : // 如果key比数组长度小，则是修改，否则是新增\r\n      hasOwn(target, key) // 不是数组，判断该对象(target)中是否含有这个属性(key)，判断是新增还是修改\r\n\r\n    const result = Reflect.set(target, key, value, receiver) // 相当于target[key] = value\r\n\r\n    if (!hadKey) { // 新增操作\r\n      trigger(target, TriggerOpTypes.ADD, key, value)\r\n    } else if (hasChanged(oldValue, value)) { // 修改操作，但是新修改的值和旧值不相等\r\n      trigger(target, TriggerOpTypes.SET, key, value, oldValue)\r\n    }\r\n    return result\r\n  }\r\n}\r\nconst get = createGetter()\r\nconst shallowGet = createGetter(false, true)\r\nconst readonlyGet = createGetter(true)\r\nconst shallowReadonlyGet = createGetter(true, true)\r\n\r\nconst set = createSetter()\r\nconst shallowSet = createSetter(true)\r\n\r\n\r\n\r\nexport const mutableHandlers = {\r\n  get,\r\n  set\r\n}\r\n\r\nexport const shallowReactiveHandlers = {\r\n  get: shallowGet,\r\n  set: shallowSet\r\n}\r\n\r\n// 只读异常提示\r\nlet readonlyObj = {\r\n  set: (target, key) => {\r\n    console.warn(`set on key ${key} failed`)\r\n  }\r\n}\r\n\r\nexport const readonlyHandlers = extend({\r\n  get: readonlyGet,\r\n}, readonlyObj)\r\n\r\nexport const shallowReadonlyHandlers = extend({\r\n  get: shallowReadonlyGet,\r\n\r\n}, readonlyObj) \r\n","import { isObject } from '@vue/shared';\r\nimport {\r\n  mutableHandlers,\r\n  shallowReactiveHandlers,\r\n  readonlyHandlers,\r\n  shallowReadonlyHandlers,\r\n} from './baseHandlers';\r\n\r\nexport function reactive(target) {\r\n  return createReactiveObject(target, false, mutableHandlers)\r\n}\r\n\r\nexport function shallowReactive(target) {\r\n  return createReactiveObject(target, false, shallowReactiveHandlers)\r\n\r\n}\r\n\r\n// readonly 不需要收集依赖，性能更高\r\nexport function readonly(target) {\r\n  return createReactiveObject(target, true, readonlyHandlers)\r\n\r\n}\r\n\r\nexport function shallowReadonly(target) {\r\n  return createReactiveObject(target, true, shallowReadonlyHandlers)\r\n\r\n}\r\n\r\n/**\r\n * 这几个方法的区别在于，是否只读，以及响应式深度不同，使用 createReactiveObject 公共函数\r\n * 柯里化，传不同参数，实现不同效果，\r\n * new Proxy() 核心是拦截数据的读取和数据的修改(劫持代理get 和 set 方法)\r\n */\r\n\r\n/**\r\n * WeakMap 会自动垃圾回收，不会造成内存泄露，存储的key只能是对象\r\n * Map 的key 如果是对象，当这个对象被清空，可能会出现 Map 还在引用这个对象的情况，造成内存泄漏\r\n */\r\nconst reactiveMap = new WeakMap() // 响应式数据代理空间，存储已经被代理的对象\r\nconst readonlyMap = new WeakMap() // 只读数据代理空间，存储已经被代理的对象\r\n\r\n/**\r\n * 劫持代理目标对象(target)，并将代理后的proxy对象放入代理空间\r\n * @param target 目标对象\r\n * @param isReadonly 是否只读\r\n * @param baseHandler new Proxy(target,handler) 中 handler的具体实现\r\n * @returns \r\n */\r\nexport function createReactiveObject(target, isReadonly, baseHandler) {\r\n  // proxy 只能拦截对象，reactive 只能拦截对象类型，如果不是对象，直接return target\r\n  if (!isObject(target)) {\r\n    return target\r\n  }\r\n\r\n  // 当一个对象被代理过了，就不需要重复代理，并且一个对象可能被reactive（响应式）代理，又被readonly（只读）代理，需要区分\r\n  const proxyMap = isReadonly ? readonlyMap : reactiveMap\r\n  const exisitProxy = proxyMap.get(target)\r\n\r\n  // 如果目标对象（target）已经被代理过了，直接返回\r\n  if (exisitProxy) {\r\n    return exisitProxy\r\n  }\r\n  const proxy = new Proxy(target, baseHandler)\r\n  proxyMap.set(target, proxy) // 将被代理的对象（target）和代理后的结果存储在 WeakMap 中\r\n  return proxy\r\n}","/**\r\n * ref 和 reactive 的区别 ，reactive 底层采用proxy，ref 底层采用 defineProperty\r\n * 为什么有reactive 还需要 ref 呢？因为 reactive 只能处理对象，处理不了原始数据类型，new Proxy(target,handler) target只能是对象(object)类型\r\n */\r\n\r\n/**\r\n * ref 将普通数据类型包装成响应式对象，该对象里的value属性，就是它的值\r\n * @param value value是原始数据类型也可以是对象，或者数组,但如果value是对象，用reactive更合理，因为 defineProperty 是针对对象的某一个属性的\r\n */\r\nexport function ref(value) {\r\n  return createRef(value)\r\n}\r\n\r\nexport function shallowRef(value) {\r\n  return createRef(value, true)\r\n}\r\n\r\nclass RefImpl {\r\n  public _value;\r\n  public __v_isRef = true // 表示是这个 ref 属性\r\n  // constructor 构造器的参数前添加public 修饰符，会将该参数添加到类的实例上\r\n  constructor(public rawValue, public shallow) {\r\n\r\n  }\r\n}\r\nfunction createRef(rawValue, shallow = false) {\r\n  return new RefImpl(rawValue, shallow)\r\n}"],"names":[],"mappings":"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"}